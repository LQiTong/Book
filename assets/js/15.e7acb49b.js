(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{356:function(e,t,n){"use strict";n.r(t);var s=n(42),a=Object(s.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"前言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[e._v("#")]),e._v(" 前言")]),e._v(" "),n("p",[e._v("vue手册致力于提取组件的封装、事件方法的抽取等。")]),e._v(" "),n("h2",{attrs:{id:"安装vantui"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#安装vantui"}},[e._v("#")]),e._v(" 安装vantui")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  npm i vant -S\n")])])]),n("h2",{attrs:{id:"按需引入"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#按需引入"}},[e._v("#")]),e._v(" 按需引入")]),e._v(" "),n("p",[e._v("安装babel-plugin-import")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  npm i babel-plugin-import -D\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("//babel-config.js\nmodule.exports = {\n  presets: [\n    '@vue/cli-plugin-babel/preset'\n  ],\n  plugins: [\n    [\n      'import',\n      {\n        libraryName: 'vant',\n        libraryDirectory: 'es',\n        style: true\n      },\n      'vant'\n    ]\n  ]\n}\n")])])]),n("p",[e._v("在src下创建plugins文件夹，在该目录下创建index.js")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import Vue from 'vue'\n\n\x3c!-- 导入组件 --\x3e\nimport {\n    Button,\n} from 'vant'\n\n\x3c!-- 注册组件 --\x3e\nVue.use(Button)\n")])])]),n("p",[e._v("然后在main.js中引入")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import '@/plugins'\n")])])]),n("p",[e._v("随即可以在.vue文件中使用注册过的组件")]),e._v(" "),n("h2",{attrs:{id:"适配rem"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#适配rem"}},[e._v("#")]),e._v(" 适配Rem")]),e._v(" "),n("p",[e._v("Vant 中的样式默认使用px作为单位，移动端使用Rem会更好，官方文档推荐使用一下两个工具：")]),e._v(" "),n("ul",[n("li",[e._v("postcss-pxtorem是一款 postcss 插件，用于将单位转化为 rem")]),e._v(" "),n("li",[e._v("lib-flexible用于设置 rem 基准值")])]),e._v(" "),n("h2",{attrs:{id:"分别安装"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#分别安装"}},[e._v("#")]),e._v(" 分别安装")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("npm install postcss-pxtorem -D\n&&\nnpm i amfe-flexible\n")])])]),n("p",[e._v("安装好后，在main.js引入amfe-flexible")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import 'amfe-flexible/index.js'\n")])])]),n("p",[e._v("如果项目根目录有postcss.config.js文件直接打开，没有就直接创建一个，在根目录啊，别跑偏了（哈哈）！")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("//postcss.config.js\nmodule.exports = {\n    plugins: {\n      'autoprefixer': {\n        overrideBrowserslist: [\n          'Android 4.1',\n          'iOS 7.1',\n          'Chrome > 31',\n          'ff > 31',\n          'ie >= 8'\n        ]\n      },\n      'postcss-pxtorem': {\n        rootValue: 37.5,\n        propList: ['*']\n      }\n    }\n}\n")])])]),n("p",[e._v("PS：375px 即100%宽度，写px会自动rem处理，如果不想被rem处理，可以使用PX来写。")]),e._v(" "),n("h2",{attrs:{id:"自定义主题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自定义主题"}},[e._v("#")]),e._v(" 自定义主题")]),e._v(" "),n("p",[e._v("Vant 使用了Less对样式进行预处理，并内置了一些样式变量，通过替换样式变量即可定制你自己需要的主题。\n下面是一些基本的样式变量，所有可用的颜色变量请参考官网配置文件。这里我直接采取的是自建less文件进行变量覆盖")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("//src/assets/vant/vant-theme.les\n@green: green;\n@blue: darkblue\n@red: pink;\n")])])]),n("h2",{attrs:{id:"按需引入时，自定义主题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#按需引入时，自定义主题"}},[e._v("#")]),e._v(" 按需引入时，自定义主题")]),e._v(" "),n("p",[e._v("更改babel.config.js文件，由于上面步骤引入了，这里稍微更改点就行")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// babel-config.js\nmodule.exports = {\n  presets: [\n    '@vue/cli-plugin-babel/preset'\n  ],\n  plugins: [\n    ['import', {\n      libraryName: 'vant',\n      libraryDirectory: 'es',\n      // style: true\n      style: name => `${name}/style/less`\n    }, 'vant']\n  ]\n}\n\n")])])]),n("p",[e._v("根目录创建vue.config.js文件，内容如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("//vue.config.js\nconst path = require('path')\nmodule.exports = {\n    css: {\n        loaderOptions: {\n            less: {\n                modifyVars: {\n                    // green: '#888',\n                    hack: `true; @import \"${path.join(__dirname,'./src/assets/van-theme.less')}\"`\n                }\n            }\n        }\n    }\n};\n")])])]),n("p",[e._v("原文链接: https://segmentfault.com/a/1190000022043508")]),e._v(" "),n("h2",{attrs:{id:"vant-ui-自带的文本样式溢出"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vant-ui-自带的文本样式溢出"}},[e._v("#")]),e._v(" vant ui 自带的文本样式溢出")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("单行 van-ellipsis\n多行 vant-multi-ellipsis\n\n")])])]),n("h1",{attrs:{id:"vue篇"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vue篇"}},[e._v("#")]),e._v(" Vue篇")]),e._v(" "),n("h2",{attrs:{id:"vue父子组件传递参数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vue父子组件传递参数"}},[e._v("#")]),e._v(" vue父子组件传递参数")]),e._v(" "),n("ul",[n("li",[e._v("父 --\x3e子: 通过props")]),e._v(" "),n("li",[e._v("子 --\x3e父: 通过 $refs 或 $emit")])]),e._v(" "),n("h2",{attrs:{id:"v-for-key值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#v-for-key值"}},[e._v("#")]),e._v(" v-for key值")]),e._v(" "),n("p",[e._v("不写key值会报warning, 和react的array渲染类似. 根据diff算法, 修改数组后, 写key值会复用, 不写会重新生成, 造成性能浪费或某些不必要的错误")]),e._v(" "),n("h2",{attrs:{id:"vue解除双向绑定"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vue解除双向绑定"}},[e._v("#")]),e._v(" vue解除双向绑定")]),e._v(" "),n("p",[n("code",[e._v("let obj = JSON.parse(JSON.stringify(this.temp1));")])]),e._v(" "),n("h2",{attrs:{id:"mvc与-mvvm的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#mvc与-mvvm的区别"}},[e._v("#")]),e._v(" MVC与 MVVM的区别")]),e._v(" "),n("ul",[n("li",[e._v("model-数据层 view-视图层 controller-控制层")]),e._v(" "),n("li",[e._v("MVC的目的是实现M和V的分离，单向通信，必须通过C来承上启下")]),e._v(" "),n("li",[e._v("MVVM中通过VM（vue中的实例化对象）的发布者-订阅者模式实现双向绑定，数据绑定，dom事件监听")]),e._v(" "),n("li",[e._v("区别：MVC和MVVM的区别并不是VM完全取代了C，ViewModel存在目的在于抽离Controller中展示的业务逻辑，而不是替代Controller，其它视图操作业务等还是应该放在Controller中实现。也就是说MVVM实现的是业务逻辑组件的重用")])]),e._v(" "),n("h2",{attrs:{id:"vue的seo问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vue的seo问题"}},[e._v("#")]),e._v(" vue的seo问题")]),e._v(" "),n("p",[e._v("seo关系到网站排名, vue搭建spa做前后端分离不好做seo, 可通过其他方法解决:")]),e._v(" "),n("ul",[n("li",[e._v("SSR服务端渲染: 将同一个组件渲染为服务器端的 HTML 字符串.利于seo且更快.")]),e._v(" "),n("li",[e._v("vue-meta-info, nuxt, prerender-spa-plugin页面预渲染等")])]),e._v(" "),n("h2",{attrs:{id:"生命周期内create和mounted的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#生命周期内create和mounted的区别"}},[e._v("#")]),e._v(" 生命周期内create和mounted的区别")]),e._v(" "),n("ul",[n("li",[n("strong",[e._v("created")]),e._v(": 在模板渲染成html前调用，即通常初始化某些数据，然后再渲染成视图。")]),e._v(" "),n("li",[n("strong",[e._v("mounted")]),e._v(": 在模板渲染成html后调用，通常是初始化页面完成后，再对html的dom节点进行一些需要的操作和方法。")])]),e._v(" "),n("h2",{attrs:{id:"vue传递参数方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vue传递参数方法"}},[e._v("#")]),e._v(" vue传递参数方法")]),e._v(" "),n("ul",[n("li",[e._v("父子组件传参如上, v-bind :    v-on @")]),e._v(" "),n("li",[e._v("兄弟组件传参:(通过EventBus事件总线实现)")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 1. 新建eventBus.js\nimport Vue from 'vue'\nexport default new Vue\n// 或直接在main.js中初始化EventBus(全局)\nVue.prototype.$EventBus = new Vue()\n\n// 2. 发射与接收\n// 如果是定义在eventBus.js中\nimport eventBus from 'eventBus.js'\neventBus.$emit()\neventBus.$on()\n\n// 如果是定义在main.js中\nthis.bus.$emit()\nthis.bus.$on()\n\n// 3. 移除监听\neventBus.$off()\n")])])]),n("h2",{attrs:{id:"vuex组成和原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vuex组成和原理"}},[e._v("#")]),e._v(" vuex组成和原理")]),e._v(" "),n("ul",[n("li",[e._v("组成: 组件间通信, 通过store实现全局存取")]),e._v(" "),n("li",[e._v("修改: 唯一途径, 通过commit一个mutations(同步)或dispatch一个actions(异步)")]),e._v(" "),n("li",[e._v("简写: 引入mapState、mapGetters、mapActions")])]),e._v(" "),n("h2",{attrs:{id:"vue-router的原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vue-router的原理"}},[e._v("#")]),e._v(" vue-router的原理?")]),e._v(" "),n("ul",[n("li",[e._v("vue-router用法\n在router.js或者某一个路由分发页面配置path, name, component对应关系\n"),n("ul",[n("li",[e._v("每个按钮一个value, 在watch功能中使用this.$router.push实现对应跳转, 类似react的this.history.push")]),e._v(" "),n("li",[e._v("或直接用router-link to去跳转, 类似react的link to")])])]),e._v(" "),n("li",[e._v("vue-router原理: 通过hash和History interface两种方式实现前端路由\n"),n("ul",[n("li",[e._v("HashHistory: 利用URL中的hash（“#”）;replace()方法与push()方法不同之处在于，它并不是将新路由添加到浏览器访问历史的栈顶，而是替换掉当前的路由")]),e._v(" "),n("li",[e._v("History interface: 是浏览器历史记录栈提供的接口，通过back(), forward(), go()等方法，我们可以读取浏览器历史记录栈的信息，进行各种跳转操作. pushState(), replaceState() 这下不仅是读取了，还可以对浏览器历史记录栈进行修改")])])])]),e._v(" "),n("h2",{attrs:{id:"登录验证拦截-通过router"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#登录验证拦截-通过router"}},[e._v("#")]),e._v(" 登录验证拦截(通过router)")]),e._v(" "),n("ul",[n("li",[e._v("先设置requireAuth:")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("routes = [\n    {\n        name: 'detail',\n        path: '/detail',\n        meta: {\n            requireAuth: true\n        }\n    },\n    {\n        name: 'login',\n        path: '/login'\n    }\n]\n")])])]),n("ul",[n("li",[e._v("再配置router.beforeEach:")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("router.beforeEach((from, to, next) => {\n    if (to.meta.requireAuth) { // 判断跳转的路由是否需要登录\n        if (store.state.token) { // vuex.state判断token是否存在\n            next() // 已登录\n        } else {\n            next({\n                path: '/login',\n                query: {redirect: to.fullPath} // 将跳转的路由path作为参数，登录成功后跳转到该路由\n            })\n        }\n    } else {\n       next()\n    }\n})\n")])])]),n("h2",{attrs:{id:"vue-config-js的基础配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vue-config-js的基础配置"}},[e._v("#")]),e._v(" vue.config.js的基础配置")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    module.exports = {\n        // 部署生产环境和开发环境下的URL。\n        // 默认情况下，Vue CLI 会假设你的应用是被部署在一个域名的根路径上\n        // 例如 https://www.ruoyi.vip/。如果应用被部署在一个子路径上，你就需要用这个选项指定这个子路径。例如，如果你的应用被部署在 https://www.ruoyi.vip/admin/，则设置 baseUrl 为 /admin/。\n        publicPath: process.env.NODE_ENV === \"production\" ? \"/\" : \"/\",\n        // 在npm run build 或 yarn build 时 ，生成文件的目录名称（要和baseUrl的生产环境路径一致）（默认dist）\n        outputDir: 'dist',\n        // 用于放置生成的静态资源 (js、css、img、fonts) 的；（项目打包之后，静态资源会放在这个文件夹下）\n        assetsDir: 'static',\n        // 是否开启eslint保存检测，有效值：ture | false | 'error'\n        lintOnSave: process.env.NODE_ENV === 'development',\n        // 如果你不需要生产环境的 source map，可以将其设置为 false 以加速生产环境构建。\n        productionSourceMap: false,\n        devServer: {\n            host: '0.0.0.0',\n            // 是否自动浏览器\n            open: true,\n            //默认启动端口\n            port: 8888,\n            // 代理\n            // proxy: {\n            //     // detail: https://cli.vuejs.org/config/#devserver-proxy\n            //     [process.env.VUE_APP_BASE_API]: {\n            //         target: `http://localhost:8080`,\n            //         changeOrigin: true,\n            //         pathRewrite: {\n            //             ['^' + process.env.VUE_APP_BASE_API]: ''\n            //         }\n            //     }\n            // },\n        disableHostCheck: true\n    }\n")])])]),n("h2",{attrs:{id:"vue项目分环境打包配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vue项目分环境打包配置"}},[e._v("#")]),e._v(" vue项目分环境打包配置")]),e._v(" "),n("p",[e._v("1.在package.json文件中配置对应打包命令")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('package.json\n    {\n        "scripts": {\n            "dev": "vue-cli-service serve --open",\n            "build:test": "vue-cli-service build --mode test",\n            "build:prod": "vue-cli-service build:prod"\n        },\n    }\n')])])]),n("p",[e._v("2.创建并配置对应的文件,一个文件对应一个打包命令(文件以.env.开头)")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(".env.development\n    # 开发环境配置\n    ENV = 'development\n\n    # 开发环境请求地址\n    VUE_APP_BASE_API = 'http://localhost:808'0\n\n    # 路由懒加载\n    VUE_CLI_BABEL_TRANSPILE_MODULES = true\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(".env.production\n    # 正式环境配置\n    ENV = 'production'\n\n    # 正式环境请求地址\n    VUE_APP_BASE_API = 'http://www.baidu.com'\n\n    # 路由懒加载\n    VUE_CLI_BABEL_TRANSPILE_MODULES = true\n")])])]),n("p",[e._v("3.执行对应打包命令")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    //测试\n    npm run build:test\n\n    or\n\n    //正式\n    npm run build:prod\n")])])]),n("p",[e._v("如此我们打包出来的请求接口前缀会根据打包文件中配置的VUE_APP_BASE_API地址而生成对应的地址，不用每次发布都更改请求地址。")]),e._v(" "),n("h2",{attrs:{id:"vue中如何使用mock-js"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vue中如何使用mock-js"}},[e._v("#")]),e._v(" vue中如何使用mock.js")]),e._v(" "),n("p",[e._v("步骤一 安装mockjs")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    npm i mockjs -S\n")])])]),n("p",[e._v("步骤二 在src下创建一个文件夹来存放mock数据，例如: /src/mock/goods.js")]),e._v(" "),n("p",[e._v("步骤三 实例化Mock 构建模拟数据，也可copy以下代码")]),e._v(" "),n("div",{staticClass:"language-goods.js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('\nconst Mock = require("mockjs");\nlet data = Mock.mock({\n    "data|100": [ //生成100条数据 数组\n        {\n            "shopId|+1": 1,//生成商品id，自增1\n            "shopMsg": "@ctitle(10)", //生成商品信息，长度为10个汉字\n            "shopName": "@cname",//生成商品名 ， 都是中国人的名字\n            "shopTel": /^1(5|3|7|8)[0-9]{9}$/,//生成随机电话号\n            "shopAddress": "@county(true)", //随机生成地址\n            "shopStar|1-5": "", //随机生成1-5个星星\n            "salesVolume|30-1000": 30, //随机生成商品价格 在30-1000之间\n            "shopLogo": "@Image(‘100x40‘,‘#c33‘, ‘#ffffff‘,‘小北鼻‘)", //生成随机图片，大小/背景色/字体颜色/文字信息\n            "food|7": [ //每个商品中再随机生成七个food\n                {\n                    "foodName": "@cname", //food的名字\n                    "foodPic": "@Image(‘100x40‘,‘#c33‘, ‘#ffffff‘,‘小可爱‘)",//生成随机图片，大小/背景色/字体颜色/文字信息\n                    "foodPrice|1-100": 20,//生成1-100的随机数\n                    "aname|14": [\n                        { \n                            "aname": "@cname", \n                            "aprice|30-60": 20 \n                        }\n                    ]\n                }\n            ]\n        }\n    ]\n})\n//三个参数。第一个路径，第二个请求方式post/get，第三个回调，返回值\nMock.mock(/goods\\/goodAll/, \'get\', () => {\n    return data\n})\n')])])]),n("p",[e._v("步骤四 在main.js中引入")]),e._v(" "),n("div",{staticClass:"language-main.js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    import '../src/mock/goods.js'\n")])])]),n("p",[e._v("步骤五 在需要的页面中使用获取数据，axios会自动拦截goods.js中定义的接口")]),e._v(" "),n("div",{staticClass:"language-Home.vue extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    import axios from 'axios\n\n    mounted () {\n        this.initData()\n    },\n    methods: {\n        initData () {\n            axios.get('/goods/goodsAll').then((data) => {\n                console.log(data)\n            })\n        }\n    }\n\n")])])]),n("h2",{attrs:{id:"解决el-upload第二次或者第n次无法触发选择图片问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#解决el-upload第二次或者第n次无法触发选择图片问题"}},[e._v("#")]),e._v(" 解决el-upload第二次或者第n次无法触发选择图片问题")]),e._v(" "),n("p",[e._v("给el-upload设置ref,在on-success || on-Error回调之后加入以下代码重置")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    this.$refs.refName.clearFiles()\n")])])]),n("h2",{attrs:{id:"vue封装一个全局loading组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vue封装一个全局loading组件"}},[e._v("#")]),e._v(" vue封装一个全局loading组件")]),e._v(" "),n("p",[e._v("在src下创建base文件夹容纳基础的组件")]),e._v(" "),n("div",{staticClass:"language-Loading.vue extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('    <template>\n  <div v-if="show" class="loading-container">\n    <img src="../../assets/img/loading.gif" alt="">\n  </div>\n</template>\n<script>\nexport default {\n  name: \'Loading\',\n  props: {\n    show: Boolean\n  },\n  data() {\n    return {\n    }\n  }\n}\n<\/script>\n\n<style scoped>\n.loading-container {\n  position: fixed;\n  top:0;\n  left:0;\n  width:100%;\n  height:100%;\n  /* background-color: green; */\n}\n.loading-container img {\n  width: 90px;\n  height: 90px;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%,-50%);\n\n\n}\n</style>\n')])])]),n("p",[e._v("在util文件夹下创建loading.js")]),e._v(" "),n("div",{staticClass:"language-loading.js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import Vue from 'vue'\nimport loadingComponent from '@/base/Loading.vue'\n\nconst LoadingConstructor = Vue.extend(loadingComponent)\n\nconst instance = new LoadingConstructor({\n  el: document.createElement('div')\n})\n\ninstance.show = false // 默认隐藏\nconst loading = {\n  show() { // 显示方法\n    instance.show = true\n    document.body.appendChild(instance.$el)\n  },\n  hide() { // 隐藏方法\n    instance.show = false\n  }\n}\n\nexport default {\n  install() {\n    if (!Vue.$loading) {\n      Vue.$loading = loading\n    }\n    Vue.mixin({\n      created() {\n        this.$loading = Vue.$loading\n      }\n    })\n  }\n}\n\n")])])]),n("p",[e._v("在main.js中注册")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import loading from '@/util/loading.js'\nVue.use(loading)\n")])])]),n("p",[e._v("在组建中使用")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("//显示方法\nthis.$loading.show()\n//隐藏方法\nthis.$loading.hide()\n")])])]),n("h1",{attrs:{id:"vuex"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vuex"}},[e._v("#")]),e._v(" Vuex")]),e._v(" "),n("h2",{attrs:{id:"vuex模块化及数据的获取详细步骤"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vuex模块化及数据的获取详细步骤"}},[e._v("#")]),e._v(" vuex模块化及数据的获取详细步骤")]),e._v(" "),n("p",[e._v("我在项目中创建了两个页面 home和me，home的作用适用于提交数据然后跳转到me页面，me页面获取vuex中存储的数据来达到我们的效果。")]),e._v(" "),n("p",[e._v("需求:")]),e._v(" "),n("ul",[n("li",[e._v("创建A/B两个页面，A用于提交数据然后跳转，B用于获取vuex中的数据信息")]),e._v(" "),n("li",[e._v("在store文件夹下面创建modules文件夹以此来达到模块化，在store根目录下创建getters.js和index.js")]),e._v(" "),n("li",[e._v("在modules文件夹下创建user.js来作为用户模块")])]),e._v(" "),n("p",[e._v("目录结构:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    store\n        modules\n            user.js\n        getters.js\n        index.js\n    views\n        home\n            index.vue\n        me\n            index.vue\n")])])]),n("p",[e._v("下面直接贴代码")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("home.vue\n\n\n<template>\n  <div>\n    <div class=\"btn\" @click=\"setUser\">修改用户信息</div>\n  </div>\n</template>\n\n<script>\nexport default {\n  methods: {\n    setUser () {\n      let users = {name: '张三', age: 30, sex: 'woman'}\n      this.$store.dispatch('setUsers',users)\n      this.$router.push({name: 'me'})\n    }\n  }\n}\n<\/script>\n\n<style>\n.btn {\n  color: #fff;\n  padding: 20px;\n  background-color: red;\n}\n</style>\n\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("me.vue\n\n\n<template>\n  <div>\n    <ul>\n      <li>姓名: {{userinfo.name}}</li>\n      <li>性别: {{userinfo.sex}}</li>\n      <li>年龄: {{userinfo.age}}</li>\n    </ul>\n  </div>\n</template>\n\n<script>\nimport {mapGetters} from 'vuex'\nexport default {\n  computed: {\n    ...mapGetters(['userinfo'])\n  }\n}\n<\/script>\n\n<style>\n\n</style>\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("user.js\n\n\nconst state = {\n    userinfo: null\n}\n\nconst mutations = {\n    //获取用户信息\n    SET_USERS (state,userinfo) {\n        state.userinfo = userinfo\n    }\n}\n\nconst actions = {\n    // 更新用户信息\n    setUsers ({commit}, userinfo) {\n        commit('SET_USERS',userinfo)\n    }\n}\n\nexport default {\n    state,\n    actions,\n    mutations\n}\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("getters.js\n\n\n\nconst getters = {\n    userinfo: state => state.user.userinfo\n}\nexport default getters\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("index.js\n\n\nimport Vue from 'vue'\nimport getters from './getters'\nimport user from './modules/user'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n\nconst store = new Vuex.Store({\n  modules: {\n    user\n  },\n  getters\n})\n\nexport default store\n\n\n")])])])])}),[],!1,null,null,null);t.default=a.exports}}]);