(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{358:function(n,r,e){"use strict";e.r(r);var t=e(42),a=Object(t.a)({},(function(){var n=this,r=n.$createElement,e=n._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"javascript手册"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#javascript手册"}},[n._v("#")]),n._v(" javascript手册")]),n._v(" "),e("h2",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[n._v("#")]),n._v(" 前言")]),n._v(" "),e("p",[n._v("javascript手册主要致力于前端开发和工程化所提取出来的公共的方法、模块、工具类的API，同样也是方便日常项目的开发效率提升")]),n._v(" "),e("h2",{attrs:{id:"javascript知识原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#javascript知识原理"}},[n._v("#")]),n._v(" javascript知识原理")]),n._v(" "),e("h3",{attrs:{id:"http状态码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http状态码"}},[n._v("#")]),n._v(" http状态码")]),n._v(" "),e("ul",[e("li",[n._v("1**: 服务器收到请求, 需请求者进一步操作")]),n._v(" "),e("li",[n._v("2**: 请求成功")]),n._v(" "),e("li",[n._v("3**: 重定向, 资源被转移到其他URL了")]),n._v(" "),e("li",[n._v("4**: 客户端错误, 请求语法错误或没有找到相应资源")]),n._v(" "),e("li",[n._v("5**: 服务端错误, server error")])]),n._v(" "),e("h3",{attrs:{id:"实现手机、电话号码前端脱敏工具类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实现手机、电话号码前端脱敏工具类"}},[n._v("#")]),n._v(" 实现手机、电话号码前端脱敏工具类")]),n._v(" "),e("p",[n._v("function phoneFilter (value) {\nif (!value) {\nreturn '--'\n}\nreturn value.replace(/(\\d{3})(\\s|\\d|-)+(\\d{4})/, '$1****$3')\n}")]),n._v(" "),e("p",[n._v("/**")]),n._v(" "),e("ul",[e("li",[n._v("中文脱敏 可以脱敏姓名 长字符串")]),n._v(" "),e("li",[n._v("姓名脱敏处理，规则：3个字以内脱敏第一个字，4—6个字脱敏前两个字，大于6个字脱敏第3—6个字，示例：张三（"),e("em",[n._v("三）、张三水（"),e("em",[n._v('三水）、长孙无忌（**无忌）、罗斯托罗司机格（罗斯XXXX格）\n**/\nfunction stringFilter(str){\nif(null != str && str != undefined){\nif(str.length <= 3){\nreturn "')]),n._v('" + str.substring(1,str.length);\n} else if(str.length > 3 && str.length <= 6){\nreturn "**" + str.substring(2,str.length);\n} else if(str.length > 6){\nreturn str.substring(0,2) + "')]),n._v('***" + str.substring(6,str.length)\n}\n} else {\nreturn "";\n}\n}')])]),n._v(" "),e("h3",{attrs:{id:"什么是闭包？闭包的优缺点？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是闭包？闭包的优缺点？"}},[n._v("#")]),n._v(" 什么是闭包？闭包的优缺点？")]),n._v(" "),e("ul",[e("li",[e("p",[n._v("概念: 内层函数能够访问外层函数作用域的变量")])]),n._v(" "),e("li",[e("p",[n._v("缺点: 引起内存泄漏（释放内存）")])]),n._v(" "),e("li",[e("p",[n._v("作用:")]),n._v(" "),e("ul",[e("li",[n._v("保护this指向")]),n._v(" "),e("li",[n._v("使用闭包修正打印值")]),n._v(" "),e("li",[n._v("实现柯里化")]),n._v(" "),e("li",[n._v("实现node commonJs 模块化, 实现私有变量")]),n._v(" "),e("li",[n._v("保持变量与函数活性, 可延迟回收和执行")])]),n._v(" "),e("h3",{attrs:{id:"for-in-和-for-of区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#for-in-和-for-of区别"}},[n._v("#")]),n._v(" for in 和 for of区别")])]),n._v(" "),e("li",[e("p",[e("code",[n._v("for in")]),n._v("遍历数组会遍历到数组原型上的属性和方法, 更适合遍历对象")])]),n._v(" "),e("li",[e("p",[e("code",[n._v("forEach")]),n._v("不支持"),e("code",[n._v("break, continue, return")]),n._v("等")])]),n._v(" "),e("li",[e("p",[n._v("使用"),e("code",[n._v("for of")]),n._v("可以成功遍历数组的值, 而不是索引, 不会遍历原型")])]),n._v(" "),e("li",[e("p",[n._v("for in 可以遍历到myObject的原型方法method,如果不想遍历原型方法和属性的话，可以在循环内部判断一下,hasOwnPropery方法可以判断某属性是否是该对象的实例属性")])])]),n._v(" "),e("h3",{attrs:{id:"this指向问题？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#this指向问题？"}},[n._v("#")]),n._v(" this指向问题？")]),n._v(" "),e("ul",[e("li",[n._v("谁调用了方法，该方法的this就指向谁;")]),n._v(" "),e("li",[n._v("优先级：箭头函数 > new绑定 > 显示绑定 > 隐式绑定")])]),n._v(" "),e("h3",{attrs:{id:"浏览器如何阻止事件传播，阻止默认行为"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器如何阻止事件传播，阻止默认行为"}},[n._v("#")]),n._v(" 浏览器如何阻止事件传播，阻止默认行为")]),n._v(" "),e("ul",[e("li",[n._v("阻止事件传播(冒泡): e.stopPropagation()")]),n._v(" "),e("li",[n._v("阻止默认行为: e.preventDefault()")])]),n._v(" "),e("h3",{attrs:{id:"虚拟dom方案相对原生dom操作有什么优点，实现上是什么原理？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#虚拟dom方案相对原生dom操作有什么优点，实现上是什么原理？"}},[n._v("#")]),n._v(" 虚拟DOM方案相对原生DOM操作有什么优点，实现上是什么原理？")]),n._v(" "),e("p",[n._v("虚拟DOM可提升性能, 无须整体重新渲染, 而是局部刷新.\nJS对象, diff算法")]),n._v(" "),e("h3",{attrs:{id:"浏览器根据请求的url交给dns域名解析，找到真实ip，向服务器发起请求；"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器根据请求的url交给dns域名解析，找到真实ip，向服务器发起请求；"}},[n._v("#")]),n._v(" 浏览器根据请求的URL交给DNS域名解析，找到真实IP，向服务器发起请求；")]),n._v(" "),e("p",[n._v("- 服务器交给后台处理完成后返回数据，浏览器接收文件（HTML、JS、CSS、图象等）；")]),n._v(" "),e("ul",[e("li",[n._v("浏览器对加载到的资源（HTML、JS、CSS等）进行语法解析，建立相应的内部数据结构（如HTML的DOM Tree）；")]),n._v(" "),e("li",[n._v("载入解析到的资源文件，渲染页面，完成。")])]),n._v(" "),e("h3",{attrs:{id:"localstorage-与-sessionstorage-与cookie的区别总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#localstorage-与-sessionstorage-与cookie的区别总结"}},[n._v("#")]),n._v(" localStorage 与 sessionStorage 与cookie的区别总结")]),n._v(" "),e("ul",[e("li",[e("strong",[n._v("共同点")]),n._v(": 都保存在浏览器端, 且同源")]),n._v(" "),e("li",[n._v("localStorage 与 sessionStorage 统称webStorage,保存在浏览器,不参与服务器通信,大小为5M")]),n._v(" "),e("li",[e("strong",[n._v("生命周期不同")]),n._v(": localStorage永久保存, sessionStorage当前会话, 都可手动清除")]),n._v(" "),e("li",[e("strong",[n._v("作用域不同")]),n._v(": 不同浏览器不共享local和session, 不同会话不共享session")]),n._v(" "),e("li",[e("strong",[n._v("Cookie")]),n._v(": 设置的过期时间前一直有效, 大小4K.有个数限制, 各浏览器不同, 一般为20个.携带在HTTP头中, 过多会有性能问题.可自己封装, 也可用原生")])]),n._v(" "),e("h3",{attrs:{id:"浏览器事件机制中事件触发三个阶段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器事件机制中事件触发三个阶段"}},[n._v("#")]),n._v(" 浏览器事件机制中事件触发三个阶段")]),n._v(" "),e("ul",[e("li",[e("strong",[n._v("事件捕获阶段")]),n._v(": 从dom树节点往下找到目标节点, 不会触发函数")]),n._v(" "),e("li",[e("strong",[n._v("事件目标处理函数")]),n._v(": 到达目标节点")]),n._v(" "),e("li",[e("strong",[n._v("事件冒泡")]),n._v(": 最后从目标节点往顶层元素传递, 通常函数在此阶段执行.\naddEventListener第三个参数默认false(冒泡阶段执行),true(捕获阶段执行).\n阻止冒泡见以上方法")])]),n._v(" "),e("h3",{attrs:{id:"浏览器缓存原理？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器缓存原理？"}},[n._v("#")]),n._v(" 浏览器缓存原理？")]),n._v(" "),e("p",[n._v("-浏览器缓存就是把一个已经请求过的资源拷贝一份存储起来，当下次需要该资源时，浏览器会根据缓存机制决定直接使用缓存资源还是再次向服务器发送请求.")]),n._v(" "),e("ul",[e("li",[n._v("作用: 减少网络传输的损耗以及降低服务器压力。")]),n._v(" "),e("li",[n._v("缓存位置优先级：Service Worker > Memory Cache > Disk Cache > Push Cache. 都没有命中，就会向服务器发请求")]),n._v(" "),e("li",[n._v("策略优先级: 强制缓存 > 协商缓存; cache-control > Expires > Etag > Last-modified")])]),n._v(" "),e("h3",{attrs:{id:"为什么操作-dom-慢"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么操作-dom-慢"}},[n._v("#")]),n._v(" 为什么操作 DOM 慢?")]),n._v(" "),e("p",[n._v("DOM本身是一个js对象, 操作这个对象本身不慢, 但是操作后触发了浏览器的行为, 如repaint和reflow等浏览器行为, 使其变慢")]),n._v(" "),e("h3",{attrs:{id:"什么情况会阻塞渲染？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么情况会阻塞渲染？"}},[n._v("#")]),n._v(" 什么情况会阻塞渲染？")]),n._v(" "),e("ul",[e("li",[n._v("js脚本同步执行")]),n._v(" "),e("li",[n._v("css和图片虽然是异步加载, 但js文件执行需依赖css, 所以css也会阻塞渲染")])]),n._v(" "),e("h3",{attrs:{id:"如何判断js运行在浏览器中还是node中？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何判断js运行在浏览器中还是node中？"}},[n._v("#")]),n._v(" 如何判断js运行在浏览器中还是node中？")]),n._v(" "),e("p",[n._v("判断有无全局对象global和window")]),n._v(" "),e("h3",{attrs:{id:"关于web以及浏览器处理预加载有哪些思考？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#关于web以及浏览器处理预加载有哪些思考？"}},[n._v("#")]),n._v(" 关于web以及浏览器处理预加载有哪些思考？")]),n._v(" "),e("p",[n._v("图片等静态资源在使用之前就提前请求\n资源使用到的时候能从缓存中加载, 提升用户体验\n页面展示的依赖关系维护")]),n._v(" "),e("h3",{attrs:{id:"实现页面回退刷新"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实现页面回退刷新"}},[n._v("#")]),n._v(" 实现页面回退刷新")]),n._v(" "),e("ul",[e("li",[n._v("旧: window.history.back() + window.location.href=document.referrer;")]),n._v(" "),e("li",[n._v("新: HTML5的新API扩展了window.history，使历史记录点更加开放了。可以存储当前历史记录点、替换当前历史记录点、监听历史记录点onpopstate, replaceState")])]),n._v(" "),e("h3",{attrs:{id:"关于预检请求"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#关于预检请求"}},[n._v("#")]),n._v(" 关于预检请求")]),n._v(" "),e("p",[n._v("在非简单请求且跨域的情况下，浏览器会自动发起options预检请求。")]),n._v(" "),e("h3",{attrs:{id:"tcp和udp协议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tcp和udp协议"}},[n._v("#")]),n._v(" TCP和UDP协议")]),n._v(" "),e("ul",[e("li",[n._v("TCP（Transmission Control Protocol：传输控制协议；面向连接，可靠传输")]),n._v(" "),e("li",[n._v("UDP（User Datagram Protocol）：用户数据报协议；面向无连接，不可靠传输")])]),n._v(" "),e("h2",{attrs:{id:"移动端自适配脚本"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#移动端自适配脚本"}},[n._v("#")]),n._v(" 移动端自适配脚本")]),n._v(" "),e("p",[n._v("随着互联网时代的不断发展，无时无刻都有人在看手机，而越来越多的企业也会选择从传统pc迈入移动wap。\n由此而然负责用户界面的前端开发人员也要因为此考虑多设备的匹配、兼容性、自适应性等，网上也有不少em和rem的适配方案，比如淘宝的flexble.js，我用了一下感觉太麻烦了，所以就自己简单的实现了一下，测试可行!")]),n._v(" "),e("p",[n._v("使用步骤")]),n._v(" "),e("ul",[e("li",[n._v("在项目根目录创建一个js文件夹，在该文件夹下新建一个rem.js")]),n._v(" "),e("li",[n._v("复制上面的代码到rem.js中并保存")]),n._v(" "),e("li",[n._v("在需要使用到rem的页面文件或者模块中引入该js文件即可")]),n._v(" "),e("li",[n._v("最后在公共的样式文件设置html,body元素一个默认的字体大小即可")]),n._v(" "),e("li",[n._v("PS: 公式: 750(设计稿) / 100 * 2 = 具体的rem单位，比如12px = 0.24rem")])]),n._v(" "),e("p",[n._v("举个例子")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('\x3c!-- set stylesheet --\x3e\n<style>\n    html,\n    body {\n        font-size: 0.24rem\n    }\n</style>\n\n\x3c!-- import javascript --\x3e\n<script src="../js/rem.js"><\/script>\n')])])]),e("h3",{attrs:{id:"rem-js"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rem-js"}},[n._v("#")]),n._v(" rem.js")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("    (function() {\n    'use strict';\n    window.onresize = function() {\n        changeFontSize();\n\n    }\n\n    function changeFontSize() {\n        var W = document.documentElement.clientWidth;\n        var docEl = document.documentElement;\n\n        if (W > 750) {\n            W = 750;\n            docEl.style.fontSize = '100px';\n        }\n        document.getElementsByTagName('html')[0].style.fontSize = W / 7.5 + 'px';\n    }\n    changeFontSize();\n\n})();\n")])])]),e("h2",{attrs:{id:"javascript常用工具类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#javascript常用工具类"}},[n._v("#")]),n._v(" javascript常用工具类")]),n._v(" "),e("h3",{attrs:{id:"类型区分工具类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#类型区分工具类"}},[n._v("#")]),n._v(" 类型区分工具类")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('    /**\n * -------------------------------------------------------------------------------------------------------------\n * 类型区分\n */\n//是否字符串\nfunction isString(params) {\n    return Object.prototype.toString.call(params).slice(8, -1) === \'String\'\n}\n\n//是否数字\nfunction isNumber(o) {\n    return Object.prototype.toString.call(o).slice(8, -1) === \'Number\'\n}\n\n// 是否对象\nfunction isObj(params) { //是否对象\n    return Object.prototype.toString.call(params).slice(8, -1) === \'Object\'\n}\n\n// 是否数组\nfunction isArray(params) {\n    return Object.prototype.toString.call(params).slice(8, -1) === \'Array\'\n}\n\n// 是否时间\nfunction isDate(params) {\n    return Object.prototype.toString.call(params).slice(8, -1) === \'Date\'\n}\n\n// 是否布尔值\nfunction isBoolean(params) {\n    return Object.prototype.toString.call(params).slice(8, -1) === \'Boolean\'\n}\n\n// 是否函数\nfunction isFunction(params) {\n    return Object.prototype.toString.call(params).slice(8, -1) === \'Function\'\n}\n\n//是否为null\nfunction isNull(params) {\n    return Object.prototype.toString.call(params).slice(8, -1) === \'Null\'\n}\n\n//是否undefined\nfunction isUndefined(params) {\n    return Object.prototype.toString.call(params).slice(8, -1) === \'Undefined\'\n}\n\n// 是否为false\nfunction isFalse(params) {\n    if (!params || params === \'null\' || params === \'undefined\' || params === \'false\' || params === \'NaN\') return true\n    return false\n}\n\n// 是否为true\nfunction isTrue(paramso) {\n    return !this.isFalse(params)\n}\n\n// 是否ios\nfunction isIos() {\n    var u = navigator.userAgent;\n    if (u.indexOf(\'Android\') > -1 || u.indexOf(\'Linux\') > -1) { //安卓手机\n        // return "Android";\n        return false\n    } else if (u.indexOf(\'iPhone\') > -1) { //苹果手机\n        // return "iPhone";\n        return true\n    } else if (u.indexOf(\'iPad\') > -1) { //iPad\n        // return "iPad";\n        return false\n    } else if (u.indexOf(\'Windows Phone\') > -1) { //winphone手机\n        // return "Windows Phone";\n        return false\n    } else {\n        return false\n    }\n}\n\n//是否为PC端\nfunction isPC() {\n    var userAgentInfo = navigator.userAgent;\n    var Agents = ["Android", "iPhone",\n        "SymbianOS", "Windows Phone",\n        "iPad", "iPod"\n    ];\n    var flag = true;\n    for (var v = 0; v < Agents.length; v++) {\n        if (userAgentInfo.indexOf(Agents[v]) > 0) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\n// 判断是什么浏览器\nfunction browserType() {\n    var userAgent = navigator.userAgent; //取得浏览器的userAgent字符串\n    var isOpera = userAgent.indexOf("Opera") > -1; //判断是否Opera浏览器\n    var isIE = userAgent.indexOf("compatible") > -1 && userAgent.indexOf("MSIE") > -1 && !isOpera; //判断是否IE浏览器\n    var isEdge = userAgent.indexOf("Edge") > -1; //判断是否IE的Edge浏览器\n    var isFF = userAgent.indexOf("Firefox") > -1; //判断是否Firefox浏览器\n    var isSafari = userAgent.indexOf("Safari") > -1 && userAgent.indexOf("Chrome") == -1; //判断是否Safari浏览器\n    var isChrome = userAgent.indexOf("Chrome") > -1 && userAgent.indexOf("Safari") > -1; //判断Chrome浏览器\n    if (isIE) {\n        var reIE = new RegExp("MSIE (\\\\d+\\\\.\\\\d+);");\n        reIE.test(userAgent);\n        var fIEVersion = parseFloat(RegExp["$1"]);\n        if (fIEVersion == 7) return "IE7"\n        else if (fIEVersion == 8) return "IE8";\n        else if (fIEVersion == 9) return "IE9";\n        else if (fIEVersion == 10) return "IE10";\n        else if (fIEVersion == 11) return "IE11";\n        else return "IE7以下" //IE版本过低\n    }\n\n    if (isFF) return "FF";\n    if (isOpera) return "Opera";\n    if (isEdge) return "Edge";\n    if (isSafari) return "Safari";\n    if (isChrome) return "Chrome";\n}\n\n// 判断是手机号码 、 身份证、邮政编码、QQ号码、邮箱、网址、IP、日期时间\nfunction checkStr(str, type) {\n    switch (type) {\n        case \'phone\': //手机号码\n            return /^1[3|4|5|7|8][0-9]{9}$/.test(str);\n        case \'tel\': //座机\n            return /^(0\\d{2,3}-\\d{7,8})(-\\d{1,4})?$/.test(str);\n        case \'card\': //身份证\n            return /^\\d{15}|\\d{18}$/.test(str);\n        case \'pwd\': //密码以字母开头，长度在6~18之间，只能包含字母、数字和下划线\n            return /^[a-zA-Z]\\w{5,17}$/.test(str)\n        case \'postal\': //邮政编码\n            return /[1-9]\\d{5}(?!\\d)/.test(str);\n        case \'QQ\': //QQ号\n            return /^[1-9][0-9]{4,9}$/.test(str);\n        case \'email\': //邮箱\n            return /^[\\w-]+(\\.[\\w-]+)*@[\\w-]+(\\.[\\w-]+)+$/.test(str);\n        case \'money\': //金额(小数点2位)\n            return /^\\d*(?:\\.\\d{0,2})?$/.test(str);\n        case \'URL\': //网址\n            return /(http|ftp|https):\\/\\/[\\w\\-_]+(\\.[\\w\\-_]+)+([\\w\\-\\.,@?^=%&:/~\\+#]*[\\w\\-\\@?^=%&/~\\+#])?/.test(\n                str)\n        case \'IP\': //IP\n            return /((?:(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d)\\\\.){3}(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d))/.test(str);\n        case \'date\': //日期时间\n            return /^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2})(?:\\:\\d{2}|:(\\d{2}):(\\d{2}))$/.test(str) ||\n                /^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/.test(str)\n            console.log(browserType())\n    }\n}\n')])])]),e("h3",{attrs:{id:"日期-时间格式化工具类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#日期-时间格式化工具类"}},[n._v("#")]),n._v(" 日期/时间格式化工具类")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("\n/**\n * -------------------------------------------------------------------------------------------------------------\n * 格式化时间\n */\n\n/*获取某月有多少天*/\nfunction getMonthOfDay(time) {\n    var date = new Date(time)\n    var year = date.getFullYear()\n    var mouth = date.getMonth() + 1\n    var days\n\n    //当月份为二月时，根据闰年还是非闰年判断天数\n    if (mouth == 2) {\n        days = year % 4 == 0 ? 29 : 28\n    } else if (mouth == 1 || mouth == 3 || mouth == 5 || mouth == 7 || mouth == 8 || mouth == 10 || mouth == 12) {\n        //月份为：1,3,5,7,8,10,12 时，为大月.则天数为31；\n        days = 31\n    } else {\n        //其他月份，天数为：30.\n        days = 30\n    }\n    return days\n}\n\n")])])]),e("h3",{attrs:{id:"数组工具类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数组工具类"}},[n._v("#")]),n._v(" 数组工具类")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("    \n/**\n * -------------------------------------------------------------------------------------------------------------\n * Array数组操作\n */\n\n\n //数组转对象\n //传入一个单挑数据的数据，返回一个对象，使其可以row.xxx访问属性\nfunction resultRow (arr) {\n    return arr[0]\n}\n举个例子\nvar datas = [{id: 111, name: 'marike', age: 26}]\nvar row = resultRow(datas)\n\n\n\n\n// 对象转换为数组对象\nfunction objToArrObj(obj) {\n    let arr = []\n    for (let i in obj) {\n        arr.push({\n            [i]: obj[i]\n        })\n    }\n    return arr\n}\n\n// 数组排序方法，type(1顺序 - 2倒叙 - 3随机)\nfunction arrSort(arr, type) {\n    return arr.sort((a, b) => {\n        switch (type) {\n            case 1:\n                return a - b;\n            case 2:\n                return b - a;\n            case 3:\n                return Math.random() - 0.5;\n            default:\n                return arr;\n        }\n    })\n}\n\n// 数组去重\nfunction arrUnique(arr) {\n    if (Array.hasOwnProperty('from')) {\n        return Array.from(new Set(arr));\n    } else {\n        var n = {},\n            r = [];\n        for (var i = 0; i < arr.length; i++) {\n            if (!n[arr[i]]) {\n                n[arr[i]] = true;\n                r.push(arr[i]);\n            }\n        }\n        return r;\n    }\n}\n\n//根据残入的option去匹配返回对应的项\nfunction filterArray (arr,option) {\n    let {key,value} = option\n    return arr.filter(el => el[key] === value)\n}\n------举个例子\nlet option = {key: '字段名比如id', value: 1}\nlet tempArray = [\n    {id: 1, name: '张三'},\n    {id: 2, name: '李四'},\n    {id: 3, name: '王五'},\n]\nconsole.log(filterArray(tempArray,option))\n\n\n//在数组中找指定的元素,返回下标\nfunction arrFinNum(arr, num) {\n    let index = -1;\n    for (let i = 0; i < arr.length; i++) {\n        if (num == arr[i]) {\n            index = i;\n            break;\n        }\n    }\n    return index;\n}\n\n\n/*求两个集合的并集*/\nfunction arrUnion(a, b) {\n    var newArr = a.concat(b);\n    return this.unique(newArr);\n}\n\n/*求两个集合的交集*/\nfunction arrIntersect(a, b) {\n    var _this = this;\n    a = this.unique(a);\n    return this.map(a, function (o) {\n        return _this.contains(b, o) ? o : null;\n    });\n}\n\n// 数组匹配删除对应元素\nfunction arrRemove(arr, ele) {\n    var index = arr.indexOf(ele);\n    if (index > -1) {\n        arr.splice(index, 1);\n    }\n    return arr;\n}\n\n// 获取数组中最小值\nfunction arrMin(arr) {\n    return Math.min.apply(null, arr);\n}\n\n// 获取数组中最大值\nfunction arrMax(arr) {\n    return Math.max.apply(null, arr);\n}\n\n// 数组求和\nfunction arrSum(arr) {\n    return arr.reduce((pre, cur) => {\n        return pre + cur\n    })\n}\n\n// 求数组的平均值\nfunction arrRverage(arr) {\n    return this.arrSum(arr) / arr.length\n}\n")])])]),e("h3",{attrs:{id:"字符串工具类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#字符串工具类"}},[n._v("#")]),n._v(" 字符串工具类")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('    \n/**\n * -------------------------------------------------------------------------------------------------------------\n * 字符串操作\n */\n\n//  截取指定字符之前的字符串\nfunction beforeStrSub(str, char) {\n    return str.split(char)[0]\n}\n\n//  截取指定字符之后的字符串\nfunction afterStrSub(str, char) {\n    return str.split(char)[1]\n}\n\n//截取指定字符串之前之后的字符串\nfunction betweenStrSub(str, start, end) {\n    temp = str.split(start, 2);\n    content = temp[1].split(end, 2);\n    return content[0];\n}\n\n//字符串反转\nfunction strInversion(str) {\n    str = str + \'\';\n    let newStr = [];\n    newStr = str.split("").reverse().join("");\n    return newStr\n}\n\n//在字符串中查找指定的字符或者字符串\nfunction judgeStrHave(str, queryStr) {\n    return str.indexOf(queryStr) === -1 ? -1 : 1\n}\n\n\n\n//  去除字符串前后空格,1-所有空格  2-前后空格  3-前空格 4-后空格\nfunction trim(str, type) {\n    type = type || 1\n    switch (type) {\n        case 1:\n            return str.replace(/\\s+/g, "");\n        case 2:\n            return str.replace(/(^\\s*)|(\\s*$)/g, "");\n        case 3:\n            return str.replace(/(^\\s*)/g, "");\n        case 4:\n            return str.replace(/(\\s*$)/g, "");\n        default:\n            return str;\n    }\n}\n\n// 大小写转换 1:首字母大写  2：首页母小写  3：大小写转换  4：全部大写  5：全部小写\nfunction changeCase(str, type) {\n    type = type || 4\n    switch (type) {\n        case 1:\n            return str.replace(/\\b\\w+\\b/g, function (word) {\n                return word.substring(0, 1).toUpperCase() + word.substring(1).toLowerCase();\n\n            });\n        case 2:\n            return str.replace(/\\b\\w+\\b/g, function (word) {\n                return word.substring(0, 1).toLowerCase() + word.substring(1).toUpperCase();\n            });\n        case 3:\n            return str.split(\'\').map(function (word) {\n                if (/[a-z]/.test(word)) {\n                    return word.toUpperCase();\n                } else {\n                    return word.toLowerCase()\n                }\n            }).join(\'\')\n        case 4:\n            return str.toUpperCase();\n        case 5:\n            return str.toLowerCase();\n        default:\n            return str;\n    }\n}\n\n// 检测密码强度\nfunction checkPwd(str) {\n    var Lv = 0;\n    if (str.length < 6) {\n        return Lv\n    }\n    if (/[0-9]/.test(str)) {\n        Lv++\n    }\n    if (/[a-z]/.test(str)) {\n        Lv++\n    }\n    if (/[A-Z]/.test(str)) {\n        Lv++\n    }\n    if (/[\\.|-|_]/.test(str)) {\n        Lv++\n    }\n    return Lv;\n}\n')])])]),e("h3",{attrs:{id:"number工具类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#number工具类"}},[n._v("#")]),n._v(" Number工具类")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("    \n/**\n * -------------------------------------------------------------------------------------------------------------\n * Number\n */\n\n//  数量超过99显示99+\nfunction hide(val) {\n    val = val ? val - 0 : 0;\n    if (val > 99) {\n        return \"99+\"\n    } else {\n        return val;\n    }\n}\n\n// 银行卡号分割\nfunction bank_filter(val) {\n    val += '';\n    val = val.replace(/(\\s)/g, '').replace(/(\\d{4})/g, '$1 ').replace(/\\s*$/, '');\n    return val;\n}\n\n")])])]),e("h3",{attrs:{id:"文件转换工具类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#文件转换工具类"}},[n._v("#")]),n._v(" 文件转换工具类")]),n._v(" "),e("p",[n._v("blob file base64")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("    \n/**\n * -------------------------------------------------------------------------------------------------------------\n * 文件格式转换file、blob、base64\n */\n\n// base64转file\nfunction base64ToFile(base64, filename) {\n    let arr = base64.split(',')\n    let mime = arr[0].match(/:(.*?);/)[1]\n    let suffix = mime.split('/')[1] // 图片后缀\n    let bstr = atob(arr[1])\n    let n = bstr.length\n    let u8arr = new Uint8Array(n)\n    while (n--) {\n        u8arr[n] = bstr.charCodeAt(n)\n    }\n    return new File([u8arr], `${filename}.${suffix}`, {\n        type: mime\n    })\n}\n\n// base64转blob\nfunction base64ToBlob(base64) {\n    let arr = base64.split(','),\n        mime = arr[0].match(/:(.*?);/)[1],\n        bstr = atob(arr[1]),\n        n = bstr.length,\n        u8arr = new Uint8Array(n);\n    while (n--) {\n        u8arr[n] = bstr.charCodeAt(n);\n    }\n    return new Blob([u8arr], {\n        type: mime\n    });\n}\n\n// file转blob\nfunction blobToFile(blob, fileName) {\n    blob.lastModifiedDate = new Date();\n    blob.name = fileName;\n    return blob;\n};\n\n// file转base64\nfunction fileToBase64(file) {\n    let reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = function (e) {\n        return e.target.result\n    };\n}\n")])])]),e("h3",{attrs:{id:"window对象工具类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#window对象工具类"}},[n._v("#")]),n._v(" window对象工具类")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("    \n/**\n * -------------------------------------------------------------------------------------------------------------\n * window\n */\n\n// 获取浏览器视口尺寸\nfunction getViewportOffset() {\n    if (window.innerWidth) {\n        return {\n            w: window.innerWidth,\n            h: window.innerHeight\n        }\n    } else {\n        // ie8及其以下\n        if (document.compatMode === \"BackCompat\") {\n            // 怪异模式\n            return {\n                w: document.body.clientWidth,\n                h: document.body.clientHeight\n            }\n        } else {\n            // 标准模式\n            return {\n                w: document.documentElement.clientWidth,\n                h: document.documentElement.clientHeight\n            }\n        }\n    }\n}\n\n\n\n// 获取地址栏传过来的参数\nfunction getQueryString(name) {\n    let reg = new RegExp(\"(^|&)\" + name + \"=([^&]*)(&|$)\");\n    let r = window.location.search.substr(1).match(reg);\n    if (r != null) return unescape(r[2]);\n    return null;\n}\n\n//  测试\n// http://localhost:3306/admin?id=111&name=xxx\n// console.log(getQueryString('id'));  // 111\n// console.log(getQueryString('name'));  // xxx\n\n\n// 解析url数据传参\nfunction queryUrl(url) {\n    var objUrl = {};\n    var urlData = url.split('?')[1];\n    if (urlData) {\n        var urlArr = urlData.split('&');\n        for (var i = 0, len = urlArr.length; i < len; i++) {\n            var curArr = urlArr[i].split('=');\n            objUrl[curArr[0]] = curArr[1]\n        }\n        return objUrl\n    }\n}\n\n")])])]),e("h3",{attrs:{id:"http请求的工具类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http请求的工具类"}},[n._v("#")]),n._v(" HTTP请求的工具类")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('对原生es6 fetch的简单请求封装\n/**\n * -------------------------------------------------------------------------------------------------------------\n * http 简单的fetch请求封装\n */\n\n\n// 请求前缀url\nconst baseUrl = "http://172.30.37.33:8099/admin/oms";\n\n/*\n * path: 请求路径\n * method: 请求方法 默认get\n * data: 请求参数 默认为空\n * */\nfunction http(path, method = "GET", data = {}) {\n\n    method = method.toUpperCase();\n\n    // 默认请求头\n    let requestHeader = {\n        headers: {\n            \'content-type\': \'application/json\'\n        },\n        method\n    };\n\n    // 如果是get请求\n    if (method === "GET") {\n        // 转换拼接get参数\n        let esc = encodeURIComponent;\n        let queryParams = Object.keys(data)\n            .map(k => `${esc(k)}=${esc(data[k])}`)\n            .join(\'&\');\n        if (queryParams) path += `?${queryParams}`;\n\n    } else {\n        // 其他请求 放入body里面\n        requestHeader.body = JSON.stringify(data)\n    }\n\n    // 可以在这封装一个回调函数，请求拦截\n\n\n    // 发送请求并返回 promise 对象 注意 fetch不会拦截其他异常请求️\n    return fetch(`${baseUrl}${path}`, requestHeader).then(\n        // 可在这里封装 响应拦截函数\n        response => response.json()\n    )\n}\n\n//调用实例\n// http("/api/v1/goods", "get", {goodsId: 123}).then((data) => {\n//     console.log(data)\n// });\n')])])]),e("h3",{attrs:{id:"封装jsonp"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#封装jsonp"}},[n._v("#")]),n._v(" 封装JSONP")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function jsonp ({url, param, callback}) {\n  return new Promise((resolve, reject) => {\n    var script = document.createElement('script')\n    window.callback = function (data) {\n      resolve(data)\n      document.body.removeChild('script')\n    }\n    var param = {...param, callback}\n    var arr = []\n    for (let key in param) {\n      arr.push(`${key}=${param[key]}`)\n    }\n    script.src = `${url}?${arr.join('&')}`\n    document.body.appendChild(script)\n  })\n}\n")])])])])}),[],!1,null,null,null);r.default=a.exports}}]);